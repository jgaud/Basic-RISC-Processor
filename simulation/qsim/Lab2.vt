// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/27/2019 13:35:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AdderNBits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AdderNBits_vlg_sample_tst(
	A,
	B,
	cin,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AdderNBits_vlg_check_tst (
	cout,
	res,
	sign,
	zero,
	sampler_rx
);
input  cout;
input [7:0] res;
input  sign;
input  zero;
input sampler_rx;

reg  cout_expected;
reg [7:0] res_expected;
reg  sign_expected;
reg  zero_expected;

reg  cout_prev;
reg [7:0] res_prev;
reg  sign_prev;
reg  zero_prev;

reg  cout_expected_prev;
reg [7:0] res_expected_prev;
reg  sign_expected_prev;
reg  zero_expected_prev;

reg  last_cout_exp;
reg [7:0] last_res_exp;
reg  last_sign_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	res_prev = res;
	sign_prev = sign;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	res_expected_prev = res_expected;
	sign_expected_prev = sign_expected;
	zero_expected_prev = zero_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected res[ 7 ]
initial
begin
	res_expected[7] = 1'bX;
end 
// expected res[ 6 ]
initial
begin
	res_expected[6] = 1'bX;
end 
// expected res[ 5 ]
initial
begin
	res_expected[5] = 1'bX;
end 
// expected res[ 4 ]
initial
begin
	res_expected[4] = 1'bX;
end 
// expected res[ 3 ]
initial
begin
	res_expected[3] = 1'bX;
end 
// expected res[ 2 ]
initial
begin
	res_expected[2] = 1'bX;
end 
// expected res[ 1 ]
initial
begin
	res_expected[1] = 1'bX;
end 
// expected res[ 0 ]
initial
begin
	res_expected[0] = 1'bX;
end 

// expected sign
initial
begin
	sign_expected = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or res_expected or res or sign_expected or sign or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected res = %b | expected sign = %b | expected zero = %b | ",cout_expected_prev,res_expected_prev,sign_expected_prev,zero_expected_prev);
	$display("| real cout = %b | real res = %b | real sign = %b | real zero = %b | ",cout_prev,res_prev,sign_prev,zero_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( res_expected_prev[0] !== 1'bx ) && ( res_prev[0] !== res_expected_prev[0] )
		&& ((res_expected_prev[0] !== last_res_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[0] = res_expected_prev[0];
	end
	if (
		( res_expected_prev[1] !== 1'bx ) && ( res_prev[1] !== res_expected_prev[1] )
		&& ((res_expected_prev[1] !== last_res_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[1] = res_expected_prev[1];
	end
	if (
		( res_expected_prev[2] !== 1'bx ) && ( res_prev[2] !== res_expected_prev[2] )
		&& ((res_expected_prev[2] !== last_res_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[2] = res_expected_prev[2];
	end
	if (
		( res_expected_prev[3] !== 1'bx ) && ( res_prev[3] !== res_expected_prev[3] )
		&& ((res_expected_prev[3] !== last_res_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[3] = res_expected_prev[3];
	end
	if (
		( res_expected_prev[4] !== 1'bx ) && ( res_prev[4] !== res_expected_prev[4] )
		&& ((res_expected_prev[4] !== last_res_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[4] = res_expected_prev[4];
	end
	if (
		( res_expected_prev[5] !== 1'bx ) && ( res_prev[5] !== res_expected_prev[5] )
		&& ((res_expected_prev[5] !== last_res_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[5] = res_expected_prev[5];
	end
	if (
		( res_expected_prev[6] !== 1'bx ) && ( res_prev[6] !== res_expected_prev[6] )
		&& ((res_expected_prev[6] !== last_res_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[6] = res_expected_prev[6];
	end
	if (
		( res_expected_prev[7] !== 1'bx ) && ( res_prev[7] !== res_expected_prev[7] )
		&& ((res_expected_prev[7] !== last_res_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res_exp[7] = res_expected_prev[7];
	end
	if (
		( sign_expected_prev !== 1'bx ) && ( sign_prev !== sign_expected_prev )
		&& ((sign_expected_prev !== last_sign_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp = sign_expected_prev;
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AdderNBits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg cin;
// wires                                               
wire cout;
wire [7:0] res;
wire sign;
wire zero;

wire sampler;                             

// assign statements (if any)                          
AdderNBits i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.cin(cin),
	.cout(cout),
	.res(res),
	.sign(sign),
	.zero(zero)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// cin
initial
begin
	cin = 1'b1;
end 

AdderNBits_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.cin(cin),
	.sampler_tx(sampler)
);

AdderNBits_vlg_check_tst tb_out(
	.cout(cout),
	.res(res),
	.sign(sign),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

